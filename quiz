Quiz time

The following quiz is meant to reinforce your understanding of the material presented above.

Question #1

What is a statement?

Hide Solution

A statement is an instruction in a computer program that tells the computer to perform an action.
Question #2

What is a function?

Hide Solution

A function is a collection of statements that executes sequentially.
Question #3

What is the name of the function that all programs must have?

Hide Solution

main
Question #4

When a program is run, where does execution start?

Hide Solution

Execution starts with the first statement inside the main function.
Question #5

What symbol are statements in C++ often ended with?

Hide Solution

The semicolon (;)
Question #6

What is a syntax error?

Hide Solution

A syntax error is a compiler error that occurs at compile-time when your program violates the grammar rules of the C++ language.
Question #7

What is the C++ Standard Library?


Review lesson 0.5 -- Introduction to the compiler, linker, and libraries
Hide Solution

A library file is a collection of precompiled code that has been “packaged up” for reuse in other programs. The C++ Standard Library is a library that ships with C++. It contains additional functionality to use in your programs.

Quiz time

Question #1

What is data?

Hide Solution

Data is any sequence of symbols (numbers, letters, etc…) that can be interpreted to mean something.
Question #2

What is a value?

Hide Solution

A value is a single piece of data stored in memory.
Question #3

What is a variable?

Hide Solution

A variable is a named region of memory.
Question #4

What is an identifier?

Hide Solution

An identifier is the name that a variable is accessed by.
Question #5

What is a type?

Hide Solution

A type tells the program how to interpret a value in memory.
Question #6

What is an integer?

Hide Solution

An integer is a number that can be written without a fractional component.

Quiz time

Question #1

What is the difference between initialization and assignment?

Hide Solution

Initialization gives a variable an initial value at the point when it is created. Assignment gives a variable a value at some point after the variable is created.
Question #2

What form of initialization should you be using (assume your compiler is C++11 compliant)?

Hide Solution

Direct brace initialization.



Quiz time

Question #1

Consider the following program that we used above:

#include <iostream>  // for std::cout and std::cin
 
int main()
{
    std::cout << "Enter a number: "; // ask user for a number
    int x{}; // define variable x to hold user input
    std::cin >> x; // get number from keyboard and store it in variable x
    std::cout << "You entered " << x << '\n';
    return 0;
}

The program expects you to enter an integer value, as the variable x that the user input will be put into is an integer variable.

Run this program multiple times and describe what happens when you enter the following types of input instead:

a) A letter, such as h

Hide Solution

x is 0.
b) A number with a fractional component. Try numbers with fractional components less than 0.5 and greater than 0.5 (e.g. 3.2 and 3.7).

Hide Solution

The fractional component is dropped.
c) A small negative integer, such as -3

Hide Solution

This works fine.
d) A word, such as Hello

Hide Solution

x is 0.
e) A really big number (at least 3 billion)

Hide Solution

You get a seemingly random number.
The last suggestion may be particularly surprising. Try it! This happens because x can only hold numbers up to a certain size. After that, it "overflows". We'll discuss overflow in a future lesson.



Quiz time

Question #1

What is an uninitialized variable? Why should you avoid using them?

Hide Solution

An uninitialized variable is a variable that has not been given a value by the program (generally through initialization or assignment). Using the value stored in an uninitialized variable will result in undefined behavior.
Question #2

What is undefined behavior, and what can happen if you do something that exhibits undefined behavior?

Hide Solution

Undefined behavior is the result of executing code whose behavior is not well defined by the language. The result can be almost anything, including something that behaves correctly.


